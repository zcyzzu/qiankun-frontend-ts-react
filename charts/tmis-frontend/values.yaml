## 实例运行数量
replicaCount: 1

## 设置默认的 image、imageTag 和 imagePullPolicy。
image:
  repository: harbor-devops.timework.cn/operation-tw-crm/tmis-frontend
  tag: ~
  pullPolicy: IfNotPresent

## Deployment 更新策略
deploymentUpdate:
  type: RollingUpdate
  maxUnavailable: 0
  maxSurge: 100%

## Pod 优先级设置
## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
##
priorityClassName: ''

## Pod 节点分配
## ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: {}
tolerations: []
affinity: {}

## Pod host aliases
## ref: https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
hostAliases: []

## 给 Pod 附加的 annotations
podAnnotations: {}

## ## Pod 附加的 labels
podLabels: {}

## 实例运行时的环境变量
env:
  open:
    __FE_API_PUBLIC_URL__: https://api-tmis-dev.timework.cn

## 资源请求和限制相关配置
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources:
  limits:
    # cpu: 100m
    # memory: 800Mi
  requests:
    # cpu: 100m
    # memory: 500Mi

## service 相关设置
## ref: http://kubernetes.io/docs/user-guide/services/
##
service:
  # 是否启用 service 暴露本服务
  enabled: false
  # Service 名称
  name: cd-front
  # Service 类型
  type: ClusterIP
  # 指定 service 的 clusterIP
  clusterIP: ~
  # 端口设置
  ports:
    # 服务端口
    http:
      port: 80
      nodePort:
  ## externalIPs 设置
  # externalIPs:
  #   - externalIp1
  annotations:
    {}
    # prometheus.io/scrape: 'true'
    # prometheus.io/path: '/actuator/prometheus'
    # prometheus.io/port: '8001'

## 日志收集
logs:
  enabled: false
  # 日志收集格式
  parser: nginx

## Ingress 相关配置
## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
##
ingress:
  enabled: true
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    # nginx.ingress.kubernetes.io/whitelist-source-range: 0.0.0.0/0
  tls: []
  # - secretName: front-example-tls
  #   hosts:
  #   - front.example.com
  path: /tmis/
  host: http://apps-dev.tmis.timework.cn/
